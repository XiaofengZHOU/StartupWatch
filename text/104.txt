Do recruiting "hacks" work? Can you get a big company's attention through wacky (or not so wacky) antics? One man, John Washam, tried and his story is, at the very least, interesting. Washam wrote about his quest to work for Google on his blog, Googley As Heck. He posted his educational milestones on his way to learning software engineering with the explicit goal of working at Google. In the end, he posted a disappointing message: he didn't get a callback. The question, then, is whether tricks like Washam's work? I asked him. TC: Who are you and what did you do? John Washam: I'm John Washam, a self-taught web developer of 16 years. I've been studying computer science and software engineering full-time for over 8 months. I run 2 web-based businesses that take very little of my time, thanks to automation. So this afforded me the opportunity to level up my skills. I've always worked on the web, and even though I had years of experience, I wasn't qualified to work in many software areas. There were numerous jobs unavailable to me due to lack of computer science knowledge. I was an Economics major. I set an audacious goal for myself - to get hired as a Google software engineer. TC: Why? JW: I needed something that would get me to keep cracking open the books and writing code on the whiteboard every day, even though it was terribly intimidating and sometimes sleep-inducing. Over time, the fear and tedium subsided, and it became super-easy and a lot of fun. Knowledge conquers fear. I wanted to go deep in learning all of it, but there just wasn't enough time in the day. I had to move on to the next topic to stay on schedule. Google really meshed well with me wanting to grow my skills and go from web developer to software engineer. Their culture mimics an academic environment and merits provability and data over opinion. The more I got into computer science topics, the more this appealed to me. And the more I learned about Google, the more interested I became. Google gets something like 2 million resumes a year, and even though I had a referral lined up, I wanted to make sure I would stand out in some way. I started posting my study progress on a new blog, Googley as Heck. I'm a web dev, so throwing a blog up is pretty trivial. My hope was that someone at Google would take notice. Every couple of days I would write a post about the cool thing I was learning that day. That was super enjoyable. Programmers like to show off their skills. To organize my studies I made a to-do list of study topics based on Google's candidate coaching notes, and augmented it with even more CS topics as I learned more and branched out. I had a rather empty Github profile, so I put the to-do list on Github to start making a decent commit history for myself. One day in October, after the to-do list was about 1600 lines long, it went viral. Now it's #27, at over 33,000 stars, and my Github profile looks much better now. My little to-do list is being translated into 13 languages. There are many wonderful people contributing to the project now. TC: Did you really think Google would notice? Why? JW: I thought it was worth a shot. Google looks for "Googleyness" in candidates, so I wanted to be the definition of Googley. I've launched a few startups. I treated this endeavor as I would a startup: build something great (my education), promote it like crazy (went viral on Medium, Hacker News, and Reddit), and go IPO or get acquired (hired) before you run out of money. Promoting a startup is something I usually do rather well, especially when the startup is mine. This time was no different. The week before I applied to Google, I posted an article on Medium that ended up being read over 100,000 times and recommended 4,000 times. I received an overwhelming amount of support and encouragement from readers, thanks to Quincy Larson, who posted the article on the FreeCodeCamp community on Medium. Quincy is a phenomenal person. TC: What was the real goal here? JW: Keep in mind that Google was merely a motivator, not the reason for all my efforts. Sure, working at Google would be amazing, but the reason was to become a software engineer. I wanted to move beyond web development and open the doors to new opportunities in other areas of software development. I wanted to build the technologies I've used and depended on all these years: databases, servers, operating systems, and more. There's a whole world of software engineering beyond the web browser. TC: Did you succeed? What happened in the interview? JW: I applied through a referral for a software engineer position. Last week I received a rejection email from the recruiter, and at first, I thought it was a mistake, and laughed it off. I checked in with my referral and he inquired into it and lobbied on my behalf, but in the end, it didn't change the situation. I never received a reason for the rejection. My referral couldn't find out either. It was pretty disappointing. The thing that bothered me is that I didn't even get a phone screen. I didn't even talk to a recruiter over the phone. After all that work and enthusiasm, I didn't even get a chance to prove myself. If it was due to my lack of experience, I definitely have more experience than a fresh college grad. Google hires people right out of college and I wasn't expecting to come in the same as a 16-year veteran of the industry. I was only claiming 2-3 years experience. I have to respect the recruiter's decision, even if I don't agree with it. They know their job better than I do. Recruiters look at hundreds of resumes every day, and they are highly tuned to detecting quality candidates and rejecting those who don't match up with their model. For some reason, I just didn't fit the profile. They probably are doing me a favor. It's possible that I would have been in over my head and continually dragged my team down. Google is known for having false negatives in their selection process, but if you're good enough for Google, you'll eventually get in. I still like Google, however, I don't know if I'll apply again in the future. I want to get hired and stay at a company for a long time. I don't want to hop around. The company that ends up hiring me will get a loyal, hardworking, enthusiastic employee. There are a lot of other places where I can strive for greatness and have that effort rewarded. Google served its purpose to motivate me - now some other company will enjoy the benefits of that motivation. TC: Do you think Google got scared of your l33t p0werz? JWL: I don't think my knowledge caused anyone to tremble in fear. I doubt my knowledge is intimidating. It's the exact same set of topics they expect candidates to know or study to prepare.
I've done a lot of speculation about the reason why the decided to pass, but I won't do that here. It's all just guessing, which accomplishes nothing. TC: What's next? Where else are you looking for work? In the end, I got what I wanted, which was my missing knowledge of computer science and "close to the metal" software engineering. I'm no longer afraid of linked lists or balanced binary search trees. I love them very much now. The things I find fascinating now are the same things an engineer with years of experience would find boring. It's all new and exciting to me. I've gone past software engineering and studied machine learning, too. It's all fantastic. Well, I put all this effort into starting a new career as a software engineer. I'm looking at companies around the Seattle area, mainly larger companies, where they can afford to take in an enthusiastic and "experienced yet green" software engineer and give me the time to get up to speed. I want to work with a professional team and write great software, including testing, debugging and profiling. I'm looking to construct quality software. I'm looking for an environment where a smart, hard-working, and knowledgeable software craftsman (in training) can thrive, grow, and learn. I will make mistakes, but will always work hard to keep from being a burden on my team. I won't bring my ego to work. I'll accept when I'm wrong and take the blame when I goof up. To potential employers, bring me hard problems. I can learn anything. If you need me to become the in-house expert on OS internals, geometry algorithms, compiler construction, cryptography, machine learning, or Intel x86 instructions, then I will. Anyway, back to studying. I've got coding problems to do. 